/*
	ReflectionCodeGenerator for Marshaller
*/
// File has been generated by ReflectionCodeGenerator version 1.18 build 46, at 2020_10_02 11:57:23.846
	
#include "EntityManagerExtension.h"

using namespace nsEntityManagerExtension;
using namespace nsECSFramework;

std::map<std::string, TEntityManagerExtension::Data> TEntityManagerExtension::mTypeNameMap;

void TEntityManagerExtension::Init(  )
{
    static bool isNeedInit = true;
    if ( !isNeedInit )
    {
        return;
    }
    isNeedInit = false;
    
    Data TFloat3_Data;
    TFloat3_Data.typeName = "TFloat3";
    TFloat3_Data.setFunc = [](TEntityManager* pEntMng, TEntityID eid, void* p){ pEntMng->SetComponent(eid, *((TFloat3*) p)); };
    TFloat3_Data.viewFunc = [](TEntityManager* pEntMng, TEntityID eid){ return (void*) pEntMng->ViewComponent<TFloat3>(eid); };
    TFloat3_Data.getFunc = [](TEntityManager* pEntMng, TEntityID eid, void*& p){ return pEntMng->GetComponent<TFloat3>(eid, *((TFloat3*) p)); };
    TFloat3_Data.hasFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->HasComponent<TFloat3>(eid); };
    TFloat3_Data.removeFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->RemoveComponent<TFloat3>(eid); };
    mTypeNameMap.insert({ TFloat3_Data.typeName, TFloat3_Data });
    
    Data TFloat4_Data;
    TFloat4_Data.typeName = "TFloat4";
    TFloat4_Data.setFunc = [](TEntityManager* pEntMng, TEntityID eid, void* p){ pEntMng->SetComponent(eid, *((TFloat4*) p)); };
    TFloat4_Data.viewFunc = [](TEntityManager* pEntMng, TEntityID eid){ return (void*) pEntMng->ViewComponent<TFloat4>(eid); };
    TFloat4_Data.getFunc = [](TEntityManager* pEntMng, TEntityID eid, void*& p){ return pEntMng->GetComponent<TFloat4>(eid, *((TFloat4*) p)); };
    TFloat4_Data.hasFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->HasComponent<TFloat4>(eid); };
    TFloat4_Data.removeFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->RemoveComponent<TFloat4>(eid); };
    mTypeNameMap.insert({ TFloat4_Data.typeName, TFloat4_Data });
    
    Data TParamClass_Data;
    TParamClass_Data.typeName = "TParamClass";
    TParamClass_Data.setFunc = [](TEntityManager* pEntMng, TEntityID eid, void* p){ pEntMng->SetComponent(eid, *((TParamClass*) p)); };
    TParamClass_Data.viewFunc = [](TEntityManager* pEntMng, TEntityID eid){ return (void*) pEntMng->ViewComponent<TParamClass>(eid); };
    TParamClass_Data.getFunc = [](TEntityManager* pEntMng, TEntityID eid, void*& p){ return pEntMng->GetComponent<TParamClass>(eid, *((TParamClass*) p)); };
    TParamClass_Data.hasFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->HasComponent<TParamClass>(eid); };
    TParamClass_Data.removeFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->RemoveComponent<TParamClass>(eid); };
    mTypeNameMap.insert({ TParamClass_Data.typeName, TParamClass_Data });
    
    Data TSimpleComponent_Data;
    TSimpleComponent_Data.typeName = "TSimpleComponent";
    TSimpleComponent_Data.setFunc = [](TEntityManager* pEntMng, TEntityID eid, void* p){ pEntMng->SetComponent(eid, *((TSimpleComponent*) p)); };
    TSimpleComponent_Data.viewFunc = [](TEntityManager* pEntMng, TEntityID eid){ return (void*) pEntMng->ViewComponent<TSimpleComponent>(eid); };
    TSimpleComponent_Data.getFunc = [](TEntityManager* pEntMng, TEntityID eid, void*& p){ return pEntMng->GetComponent<TSimpleComponent>(eid, *((TSimpleComponent*) p)); };
    TSimpleComponent_Data.hasFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->HasComponent<TSimpleComponent>(eid); };
    TSimpleComponent_Data.removeFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->RemoveComponent<TSimpleComponent>(eid); };
    mTypeNameMap.insert({ TSimpleComponent_Data.typeName, TSimpleComponent_Data });
    
    Data TTestClass_Data;
    TTestClass_Data.typeName = "TTestClass";
    TTestClass_Data.setFunc = [](TEntityManager* pEntMng, TEntityID eid, void* p){ pEntMng->SetComponent(eid, *((TTestClass*) p)); };
    TTestClass_Data.viewFunc = [](TEntityManager* pEntMng, TEntityID eid){ return (void*) pEntMng->ViewComponent<TTestClass>(eid); };
    TTestClass_Data.getFunc = [](TEntityManager* pEntMng, TEntityID eid, void*& p){ return pEntMng->GetComponent<TTestClass>(eid, *((TTestClass*) p)); };
    TTestClass_Data.hasFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->HasComponent<TTestClass>(eid); };
    TTestClass_Data.removeFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->RemoveComponent<TTestClass>(eid); };
    mTypeNameMap.insert({ TTestClass_Data.typeName, TTestClass_Data });
    
    Data nsBS_TBaseStruct_Data;
    nsBS_TBaseStruct_Data.typeName = "nsBS::TBaseStruct";
    nsBS_TBaseStruct_Data.setFunc = [](TEntityManager* pEntMng, TEntityID eid, void* p){ pEntMng->SetComponent(eid, *((nsBS::TBaseStruct*) p)); };
    nsBS_TBaseStruct_Data.viewFunc = [](TEntityManager* pEntMng, TEntityID eid){ return (void*) pEntMng->ViewComponent<nsBS::TBaseStruct>(eid); };
    nsBS_TBaseStruct_Data.getFunc = [](TEntityManager* pEntMng, TEntityID eid, void*& p){ return pEntMng->GetComponent<nsBS::TBaseStruct>(eid, *((nsBS::TBaseStruct*) p)); };
    nsBS_TBaseStruct_Data.hasFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->HasComponent<nsBS::TBaseStruct>(eid); };
    nsBS_TBaseStruct_Data.removeFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->RemoveComponent<nsBS::TBaseStruct>(eid); };
    mTypeNameMap.insert({ nsBS_TBaseStruct_Data.typeName, nsBS_TBaseStruct_Data });
    
    Data nsBS_TTestStruct_Data;
    nsBS_TTestStruct_Data.typeName = "nsBS::TTestStruct";
    nsBS_TTestStruct_Data.setFunc = [](TEntityManager* pEntMng, TEntityID eid, void* p){ pEntMng->SetComponent(eid, *((nsBS::TTestStruct*) p)); };
    nsBS_TTestStruct_Data.viewFunc = [](TEntityManager* pEntMng, TEntityID eid){ return (void*) pEntMng->ViewComponent<nsBS::TTestStruct>(eid); };
    nsBS_TTestStruct_Data.getFunc = [](TEntityManager* pEntMng, TEntityID eid, void*& p){ return pEntMng->GetComponent<nsBS::TTestStruct>(eid, *((nsBS::TTestStruct*) p)); };
    nsBS_TTestStruct_Data.hasFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->HasComponent<nsBS::TTestStruct>(eid); };
    nsBS_TTestStruct_Data.removeFunc = [](TEntityManager* pEntMng, TEntityID eid){ return pEntMng->RemoveComponent<nsBS::TTestStruct>(eid); };
    mTypeNameMap.insert({ nsBS_TTestStruct_Data.typeName, nsBS_TTestStruct_Data });
    
}
//---------------------------------------------------------------------------------------
void TEntityManagerExtension::SetComponent( TEntityManager* pEntMng, TEntityID eid, void* p, const std::string& typeName )
{
    Init();
    mTypeNameMap[typeName].setFunc(pEntMng, eid, p);
}
//---------------------------------------------------------------------------------------
void* TEntityManagerExtension::ViewComponent( TEntityManager* pEntMng, TEntityID eid, const std::string& typeName )
{
    Init();
    return mTypeNameMap[typeName].viewFunc(pEntMng, eid);
}
//---------------------------------------------------------------------------------------
bool TEntityManagerExtension::GetComponent( TEntityManager* pEntMng, TEntityID eid, void*& p, const std::string& typeName )
{
    Init();
    return mTypeNameMap[typeName].getFunc(pEntMng, eid, p);
}
//---------------------------------------------------------------------------------------
bool TEntityManagerExtension::HasComponent( TEntityManager* pEntMng, TEntityID eid, const std::string& typeName )
{
    Init();
    return mTypeNameMap[typeName].hasFunc(pEntMng, eid);
}
//---------------------------------------------------------------------------------------
void TEntityManagerExtension::RemoveComponent( TEntityManager* pEntMng, TEntityID eid, const std::string& typeName )
{
    Init();
    mTypeNameMap[typeName].removeFunc(pEntMng, eid);
}
//---------------------------------------------------------------------------------------
