/*
Author: Gudakov Ramil Sergeevich a.k.a.Gauss
Гудаков Рамиль Сергеевич
Contacts : [ramil2085@mail.ru, ramil2085@gmail.com]
See for more information License.h.
*/
// File has been generated by ReflectionCodeGenerator version 1.0 build 22, at 2019_01_27 14:04:51.185
	
#include "JsonSerializer.h"
#include "fmt/core.h"
#include "JsonPopMaster.h"
#include "JsonPushMaster.h"

using namespace nsJson;

using POM = TJsonPopMaster;
using PUM = TJsonPushMaster;

void TJsonSerializer::_Serialize( TBaseStruct* p, Jobj& obj )
{
  PUM::Push( obj, "s", p->s );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TBaseStruct* p, const json11::Json& json )
{
  POM::PopStr( json, "s", p->s );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TFloat3* p, Jobj& obj )
{
  PUM::Push( obj, "x", p->x );
  PUM::Push( obj, "y", p->y );
  PUM::Push( obj, "z", p->z );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TFloat3* p, const json11::Json& json )
{
  POM::PopNum( json, "x", p->x );
  POM::PopNum( json, "y", p->y );
  POM::PopNum( json, "z", p->z );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TFloat4* p, Jobj& obj )
{
  PUM::Push( obj, "x", p->x );
  PUM::Push( obj, "y", p->y );
  PUM::Push( obj, "z", p->z );
  PUM::Push( obj, "w", p->w );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TFloat4* p, const json11::Json& json )
{
  POM::PopNum( json, "x", p->x );
  POM::PopNum( json, "y", p->y );
  POM::PopNum( json, "z", p->z );
  POM::PopNum( json, "w", p->w );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TParamClass* p, Jobj& obj )
{
  PUM::Push( obj, "id", p->id );
  Jobj pos_obj;
  _Serialize( &(p->pos), pos_obj );
  PUM::Push( obj, "pos", pos_obj );
  Jobj rot_obj;
  _Serialize( &(p->rot), rot_obj );
  PUM::Push( obj, "rot", rot_obj );
  Jobj vel_obj;
  _Serialize( &(p->vel), vel_obj );
  PUM::Push( obj, "vel", vel_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TParamClass* p, const json11::Json& json )
{
  POM::PopNum( json, "id", p->id );
  auto& pos_json = json["pos"];
  _Deserialize( &(p->pos), pos_json );
  auto& rot_json = json["rot"];
  _Deserialize( &(p->rot), rot_json );
  auto& vel_json = json["vel"];
  _Deserialize( &(p->vel), vel_json );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TTestClass* p, Jobj& obj )
{
  PUM::PushSerObjArray<TParamClass>( obj, "vParam", p->vParam, []( TParamClass* p, Jobj& obj ) { _Serialize( p, obj ); } );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TTestClass* p, const json11::Json& json )
{
  POM::PopSerObjArray<TParamClass>( json, "vParam", p->vParam, []( TParamClass* p, const json11::Json& json ) { _Deserialize( p, json ); } );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TTestStruct* p, Jobj& obj )
{
  _Serialize( (TBaseStruct*)p, obj);
  Jobj baseStruct_obj;
  _Serialize( &(p->baseStruct), baseStruct_obj );
  PUM::Push( obj, "baseStruct", baseStruct_obj );
  Jobj pBaseStruct_obj;
  auto p_pBaseStruct = p->pBaseStruct;
  if ( p_pBaseStruct )
  {
    _Serialize( p_pBaseStruct, pBaseStruct_obj );
    PUM::Push( obj, "pBaseStruct", pBaseStruct_obj );
  }
  else
    PUM::PushNull( obj, "pBaseStruct" );
  Jobj spBaseStruct_obj;
  auto p_spBaseStruct = p->spBaseStruct.get();
  if ( p_spBaseStruct )
  {
    _Serialize( p_spBaseStruct, spBaseStruct_obj );
    PUM::Push( obj, "spBaseStruct", spBaseStruct_obj );
  }
  else
    PUM::PushNull( obj, "spBaseStruct" );
  PUM::Push( obj, "password", p->password );
  PUM::Push( obj, "port", p->port );
  PUM::Push( obj, "flag", p->flag );
  PUM::Push( obj, "strSet", p->strSet );
  PUM::Push( obj, "intSet", p->intSet );
  PUM::Push( obj, "boolList", p->boolList );
  PUM::Push( obj, "numList", p->numList );
  PUM::Push( obj, "numVector", p->numVector );
  PUM::PushSerObjArray<TBaseStruct>( obj, "baseVec", p->baseVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerPtrArray<TBaseStruct>( obj, "basePtrVec", p->basePtrVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerSmartPtrArray<TBaseStruct, std::shared_ptr<TBaseStruct>>( obj, "baseSPVec", p->baseSPVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushMap( obj, "intIntMap", p->intIntMap );
  PUM::PushMap( obj, "intBoolMap", p->intBoolMap );
  PUM::PushMap( obj, "intStrMap", p->intStrMap );
  PUM::PushMap( obj, "strStrMap", p->strStrMap );
  PUM::PushMap( obj, "strIntMap", p->strIntMap );
  PUM::PushMap( obj, "strBoolMap", p->strBoolMap );
  PUM::PushSerObjMap<TBaseStruct>( obj, "strBaseMap", p->strBaseMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerPtrMap<TBaseStruct>( obj, "strBasePtrMap", p->strBasePtrMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerSmartPtrMap<TBaseStruct, std::shared_ptr<TBaseStruct>>( obj, "strBaseSPMap", p->strBaseSPMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerObjMap<TBaseStruct>( obj, "intBaseMap", p->intBaseMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerPtrMap<TBaseStruct>( obj, "intBasePtrMap", p->intBasePtrMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerSmartPtrMap<TBaseStruct, std::shared_ptr<TBaseStruct>>( obj, "intBaseSPMap", p->intBaseSPMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TTestStruct* p, const json11::Json& json )
{
  _Deserialize( (TBaseStruct*)p, json);
  auto& baseStruct_json = json["baseStruct"];
  _Deserialize( &(p->baseStruct), baseStruct_json );
  auto& pBaseStruct_json = json["pBaseStruct"];
  if ( pBaseStruct_json.is_null() == false )
  {
    if ( p->pBaseStruct == nullptr )
      p->pBaseStruct = new TBaseStruct();
    _Deserialize( p->pBaseStruct, pBaseStruct_json );
  }
  auto& spBaseStruct_json = json["spBaseStruct"];
  if ( spBaseStruct_json.is_null() == false )
  {
    if ( p->spBaseStruct.get() == nullptr )
      p->spBaseStruct.reset( new TBaseStruct() );
    _Deserialize( p->spBaseStruct.get(), spBaseStruct_json );
  }
  POM::PopStr( json, "password", p->password );
  POM::PopNum( json, "port", p->port );
  POM::PopBool( json, "flag", p->flag );
  POM::PopStrSet( json, "strSet", p->strSet );
  POM::PopNumSet<int>( json, "intSet", p->intSet );
  POM::PopBoolArray( json, "boolList", p->boolList );
  POM::PopNumArray<int>( json, "numList", p->numList );
  POM::PopNumArray<int>( json, "numVector", p->numVector );
  POM::PopSerObjArray<TBaseStruct>( json, "baseVec", p->baseVec, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopSerPtrArray<TBaseStruct>( json, "basePtrVec", p->basePtrVec, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopSerSmartPtrArray<TBaseStruct, std::shared_ptr<TBaseStruct>>( json, "baseSPVec", p->baseSPVec, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopNumNumMap( json, "intIntMap", p->intIntMap );
  POM::PopNumBoolMap( json, "intBoolMap", p->intBoolMap );
  POM::PopNumStrMap( json, "intStrMap", p->intStrMap );
  POM::PopStrStrMap( json, "strStrMap", p->strStrMap );
  POM::PopStrNumMap( json, "strIntMap", p->strIntMap );
  POM::PopStrBoolMap( json, "strBoolMap", p->strBoolMap );
  POM::PopStrSerObjMap<TBaseStruct>( json, "strBaseMap", p->strBaseMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopStrSerPtrMap<TBaseStruct>( json, "strBasePtrMap", p->strBasePtrMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopStrSerSmartPtrMap<TBaseStruct, std::shared_ptr<TBaseStruct>>( json, "strBaseSPMap", p->strBaseSPMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopNumSerObjMap<int, TBaseStruct>( json, "intBaseMap", p->intBaseMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopNumSerPtrMap<int, TBaseStruct>( json, "intBasePtrMap", p->intBasePtrMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopNumSerSmartPtrMap<int, TBaseStruct, std::shared_ptr<TBaseStruct>>( json, "intBaseSPMap", p->intBaseSPMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
}
//---------------------------------------------------------------------------------------
