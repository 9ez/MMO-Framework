/*
test
*/
// File has been generated by ReflectionCodeGenerator version 1.14 build 42, at 2020_09_13 14:04:16.888
	
#pragma once

#include <string>
#include <functional>
#include "JsonMaster.h"
#include "json11.h"
#include "IncludeList.h"

namespace nsJson
{
    class TJsonSerializer
    {
        typedef TJsonMaster::Jobj Jobj;
        typedef TJsonMaster::Jarr Jarr;
    
        struct TypeFunc
        {
            std::function<void(void*, std::string&)>  serializeFunc;
            std::function<void(void*&, const std::string&)> deserializeFunc;
            std::function<void(void*, const std::string&)> fillFunc;
        };
    
        static std::map<std::string, TypeFunc> mTypeNameFuncsMap;
        static std::list<std::string> mTypeNameList;
    
        static void Init();
    public:
        static const std::list<std::string>& GetTypeNameList();
    
        template <typename Type>
        static void Serialize( Type* p, std::string& str );
        template <typename Type>
        static void Deserialize( Type*& p, const std::string& str );
        template <typename Type>
        static void Fill( Type* p, const std::string& str );
    
        static void Serialize(void* p, std::string& str, const std::string& typeName);
        static void Deserialize(void*& p, const std::string& str, const std::string& typeName);
        static void Fill(void* p, const std::string& str, const std::string& typeName);
    private:
        template <typename Type>
        static void _Deserialize( Type*& p, const std::string& str, bool checkPtr );
    private:
        static void _Serialize( TestClass* p, Jobj& obj );
        static void _Deserialize( TestClass* p, const json11::Json& json );
        
        static void _Serialize( nsBS::TBaseStruct* p, Jobj& obj );
        static void _Deserialize( nsBS::TBaseStruct* p, const json11::Json& json );
        
        static void _Serialize( nsBS::TTestStruct* p, Jobj& obj );
        static void _Deserialize( nsBS::TTestStruct* p, const json11::Json& json );
        
    };
    //------------------------------------------------------------------------------------------------------------
    template <typename Type>
    static void TJsonSerializer::Serialize( Type* p, std::string& str )
    {
        Jobj obj;
        _Serialize( p, obj );
        json11::Json json( obj );
        str = json.dump();
    }
    //------------------------------------------------------------------------------------------------------------
    template <typename Type>
    static void TJsonSerializer::Deserialize( Type*& p, const std::string& str )
    {
        _Deserialize( p, str, true );
    }
    //------------------------------------------------------------------------------------------------------------
    template <typename Type>
    static void TJsonSerializer::Fill( Type* p, const std::string& str )
    {
        _Deserialize( p, str, false );
    }
    //------------------------------------------------------------------------------------------------------------
    template <typename Type>
    static void TJsonSerializer::_Deserialize( Type*& p, const std::string& str, bool checkPtr )
    {
        std::string err;
        auto json = json11::Json::parse( str, err, json11::JsonParse::COMMENTS );
        if ( err.size() > 0 )
            return;
    
        if ( checkPtr )
            p = p ? p : new Type();
    
        _Deserialize( p, json.object_items() );
    }
}
