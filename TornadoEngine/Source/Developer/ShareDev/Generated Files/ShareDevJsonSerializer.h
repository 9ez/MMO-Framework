/*

*/
// File has been generated by ReflectionCodeGenerator version 1.13 build 41, at 2020_09_03 08:33:27.983
	
#pragma once

#include <string>
#include "JsonMaster.h"
#include "json11.h"
#include "IncludeList.h"

class DllExport TShareDevJsonSerializer
{
    typedef TJsonMaster::Jobj Jobj;
    typedef TJsonMaster::Jarr Jarr;
public:
    template <typename Type>
    static void Serialize( Type* p, std::string& str );
    template <typename Type>
    static void Deserialize( Type*& p, std::string& str );
    template <typename Type>
    static void Fill( Type* p, std::string& str );
private:
    template <typename Type>
    static void _Deserialize( Type*& p, std::string& str, bool checkPtr );
private:
    static void _Serialize( TBaseResources* p, Jobj& obj );
    static void _Deserialize( TBaseResources* p, const json11::Json& json );
    
    static void _Serialize( TFrameworkResources* p, Jobj& obj );
    static void _Deserialize( TFrameworkResources* p, const json11::Json& json );
    
    static void _Serialize( TGUIResources* p, Jobj& obj );
    static void _Deserialize( TGUIResources* p, const json11::Json& json );
    
    static void _Serialize( TGameEngineResources* p, Jobj& obj );
    static void _Deserialize( TGameEngineResources* p, const json11::Json& json );
    
    static void _Serialize( TGameResources* p, Jobj& obj );
    static void _Deserialize( TGameResources* p, const json11::Json& json );
    
    static void _Serialize( TGraphicEngineResources* p, Jobj& obj );
    static void _Deserialize( TGraphicEngineResources* p, const json11::Json& json );
    
    static void _Serialize( TOgreCfg* p, Jobj& obj );
    static void _Deserialize( TOgreCfg* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TMatrix16* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TMatrix16* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TMatrix9* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TMatrix9* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TOrientation* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TOrientation* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TPlane* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TPlane* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TPoint2* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TPoint2* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TQuaternion* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TQuaternion* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TVector2* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TVector2* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TVector3* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TVector3* p, const json11::Json& json );
    
    static void _Serialize( nsMathTools::TVector4* p, Jobj& obj );
    static void _Deserialize( nsMathTools::TVector4* p, const json11::Json& json );
    
};
//------------------------------------------------------------------------------------------------------------
template <typename Type>
static void TShareDevJsonSerializer::Serialize( Type* p, std::string& str )
{
    Jobj obj;
    _Serialize( p, obj );
    json11::Json json( obj );
    str = json.dump();
}
//------------------------------------------------------------------------------------------------------------
template <typename Type>
static void TShareDevJsonSerializer::Deserialize( Type*& p, std::string& str )
{
    _Deserialize( p, str, true );
}
//------------------------------------------------------------------------------------------------------------
template <typename Type>
static void TShareDevJsonSerializer::Fill( Type* p, std::string& str )
{
    _Deserialize( p, str, false );
}
//------------------------------------------------------------------------------------------------------------
template <typename Type>
static void TShareDevJsonSerializer::_Deserialize( Type*& p, std::string& str, bool checkPtr )
{
    std::string err;
    auto json = json11::Json::parse( str, err, json11::JsonParse::COMMENTS );
    if ( err.size() > 0 )
        return;

    if ( checkPtr )
        p = p ? p : new Type();

    _Deserialize( p, json.object_items() );
}
