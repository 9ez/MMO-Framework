/*
Author: Gudakov Ramil Sergeevich a.k.a.Gauss
Гудаков Рамиль Сергеевич
Contacts : [ramil2085@mail.ru, ramil2085@gmail.com]
See for more information LICENSE.md.
*/
// File has been generated by ReflectionCodeGenerator version 1.9 build 38, at 2020_05_18 09:03:02.011
	
#include "ShareDevJsonSerializer.h"
#include "fmt/core.h"
#include "JsonPopMaster.h"
#include "JsonPushMaster.h"


using POM = TJsonPopMaster;
using PUM = TJsonPushMaster;

void TShareDevJsonSerializer::_Serialize( TBaseResources* p, Jobj& obj )
{
  PUM::Push( obj, "name", p->name );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Deserialize( TBaseResources* p, const json11::Json& json )
{
  POM::PopStr( json, "name", p->name );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Serialize( TFrameworkResources* p, Jobj& obj )
{
  Jobj gameEngine_obj;
  _Serialize( &(p->gameEngine), gameEngine_obj );
  PUM::Push( obj, "gameEngine", gameEngine_obj );
  Jobj graphicEngine_obj;
  _Serialize( &(p->graphicEngine), graphicEngine_obj );
  PUM::Push( obj, "graphicEngine", graphicEngine_obj );
  Jobj gui_obj;
  _Serialize( &(p->gui), gui_obj );
  PUM::Push( obj, "gui", gui_obj );
  Jobj game_obj;
  _Serialize( &(p->game), game_obj );
  PUM::Push( obj, "game", game_obj );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Deserialize( TFrameworkResources* p, const json11::Json& json )
{
  auto& gameEngine_json = json["gameEngine"];
  _Deserialize( &(p->gameEngine), gameEngine_json );
  auto& graphicEngine_json = json["graphicEngine"];
  _Deserialize( &(p->graphicEngine), graphicEngine_json );
  auto& gui_json = json["gui"];
  _Deserialize( &(p->gui), gui_json );
  auto& game_json = json["game"];
  _Deserialize( &(p->game), game_json );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Serialize( TGUIResources* p, Jobj& obj )
{
  _Serialize( (TBaseResources*)p, obj);
  
  Jobj resources_c0;
  for ( auto& resources_e0 : p->resources )
  {
    Jarr resources_c1;
    for ( auto& resources_e1 : resources_e0.second )
    {
      resources_c1.push_back( resources_e1 );
    }
    resources_c0.insert( { fmt::format( "{}", resources_e0.first ), resources_c1 } );
  }
  PUM::PushMap( obj, "resources", resources_c0 );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Deserialize( TGUIResources* p, const json11::Json& json )
{
  _Deserialize( (TBaseResources*)p, json);
  
  auto& resources_src0 = json["resources"].object_items();
  for ( auto& resources_e0 : resources_src0 )
  {
    std::list<std::string> resources_c1;
    auto& resources_src1 = resources_e0.second.array_items();
    for ( auto& resources_e1 : resources_src1 )
    {
      resources_c1.push_back( resources_e1.string_value() );
    }
    p->resources.insert( { resources_e0.first, resources_c1 } );
  }
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Serialize( TGameEngineResources* p, Jobj& obj )
{
  _Serialize( (TBaseResources*)p, obj);
  
  Jobj resources_c0;
  for ( auto& resources_e0 : p->resources )
  {
    Jarr resources_c1;
    for ( auto& resources_e1 : resources_e0.second )
    {
      resources_c1.push_back( resources_e1 );
    }
    resources_c0.insert( { fmt::format( "{}", resources_e0.first ), resources_c1 } );
  }
  PUM::PushMap( obj, "resources", resources_c0 );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Deserialize( TGameEngineResources* p, const json11::Json& json )
{
  _Deserialize( (TBaseResources*)p, json);
  
  auto& resources_src0 = json["resources"].object_items();
  for ( auto& resources_e0 : resources_src0 )
  {
    std::list<std::string> resources_c1;
    auto& resources_src1 = resources_e0.second.array_items();
    for ( auto& resources_e1 : resources_src1 )
    {
      resources_c1.push_back( resources_e1.string_value() );
    }
    p->resources.insert( { resources_e0.first, resources_c1 } );
  }
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Serialize( TGameResources* p, Jobj& obj )
{
  _Serialize( (TBaseResources*)p, obj);
  
  Jobj resources_c0;
  for ( auto& resources_e0 : p->resources )
  {
    Jarr resources_c1;
    for ( auto& resources_e1 : resources_e0.second )
    {
      resources_c1.push_back( resources_e1 );
    }
    resources_c0.insert( { fmt::format( "{}", resources_e0.first ), resources_c1 } );
  }
  PUM::PushMap( obj, "resources", resources_c0 );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Deserialize( TGameResources* p, const json11::Json& json )
{
  _Deserialize( (TBaseResources*)p, json);
  
  auto& resources_src0 = json["resources"].object_items();
  for ( auto& resources_e0 : resources_src0 )
  {
    std::list<std::string> resources_c1;
    auto& resources_src1 = resources_e0.second.array_items();
    for ( auto& resources_e1 : resources_src1 )
    {
      resources_c1.push_back( resources_e1.string_value() );
    }
    p->resources.insert( { resources_e0.first, resources_c1 } );
  }
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Serialize( TGraphicEngineResources* p, Jobj& obj )
{
  _Serialize( (TBaseResources*)p, obj);
  PUM::Push( obj, "terrainPath", p->terrainPath );
  Jobj pluginsCfg_obj;
  _Serialize( &(p->pluginsCfg), pluginsCfg_obj );
  PUM::Push( obj, "pluginsCfg", pluginsCfg_obj );
  Jobj ogreCfg_obj;
  _Serialize( &(p->ogreCfg), ogreCfg_obj );
  PUM::Push( obj, "ogreCfg", ogreCfg_obj );
  
  Jobj resources_c0;
  for ( auto& resources_e0 : p->resources )
  {
    Jarr resources_c1;
    for ( auto& resources_e1 : resources_e0.second )
    {
      resources_c1.push_back( resources_e1 );
    }
    resources_c0.insert( { fmt::format( "{}", resources_e0.first ), resources_c1 } );
  }
  PUM::PushMap( obj, "resources", resources_c0 );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Deserialize( TGraphicEngineResources* p, const json11::Json& json )
{
  _Deserialize( (TBaseResources*)p, json);
  POM::PopStr( json, "terrainPath", p->terrainPath );
  auto& pluginsCfg_json = json["pluginsCfg"];
  _Deserialize( &(p->pluginsCfg), pluginsCfg_json );
  auto& ogreCfg_json = json["ogreCfg"];
  _Deserialize( &(p->ogreCfg), ogreCfg_json );
  
  auto& resources_src0 = json["resources"].object_items();
  for ( auto& resources_e0 : resources_src0 )
  {
    std::list<std::string> resources_c1;
    auto& resources_src1 = resources_e0.second.array_items();
    for ( auto& resources_e1 : resources_src1 )
    {
      resources_c1.push_back( resources_e1.string_value() );
    }
    p->resources.insert( { resources_e0.first, resources_c1 } );
  }
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Serialize( TOgreCfg* p, Jobj& obj )
{
  PUM::Push( obj, "release", p->release );
  PUM::Push( obj, "debug", p->debug );
}
//---------------------------------------------------------------------------------------
void TShareDevJsonSerializer::_Deserialize( TOgreCfg* p, const json11::Json& json )
{
  POM::PopStr( json, "release", p->release );
  POM::PopStr( json, "debug", p->debug );
}
//---------------------------------------------------------------------------------------
