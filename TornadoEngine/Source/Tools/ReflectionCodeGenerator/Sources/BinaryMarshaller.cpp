/*
	ReflectionCodeGenerator
*/
// File has been generated by ReflectionCodeGenerator version 1.18 build 46, at 2020_10_02 11:34:43.783
	
#include "BinaryMarshaller.h"
#include "UnpackHandler.h"

using namespace nsBinary;

void TBinaryMarshaller::SetLimitForCompression( int binarySize )
{
  mSetLimitForCompression = binarySize;
}
//-----------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::GetID( char* packedData, int size )
{
  auto pHeader = (THeader*) packedData;
  return pHeader->type;
}
//-----------------------------------------------------------------------------
void TBinaryMarshaller::PushIsNotNullptr( void* p )
{
  unsigned char isNullptr = p == nullptr ? 0 : 1;
  mPushMaster.PushNum( isNullptr );
}
//-----------------------------------------------------------------------------
bool TBinaryMarshaller::PopIsNotNullptr()
{
  unsigned char isNullptr;
  mPopMaster.PopNum( isNullptr );
  return ( isNullptr != 0 );
}
//-----------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::PrepareForUnpackPopMaster( char* packedData, int size )
{
  int headerSize = sizeof( THeader );
  THeader header;
  memcpy( &header, packedData, headerSize );
  char* pObj = packedData + headerSize;
  int objSize = size - headerSize;

  // decompression
  if ( header.useCompression )
  {
    mBuffer.Clear();
    mBuffer.Shift( objSize * header.ratio );// расширить для запаса под декомпрессию
    int decompressedRes = LZ4_decompress_safe( pObj, mBuffer.GetPtr(), objSize, mBuffer.GetSize() );
    mBuffer.Clear();
    mBuffer.Shift( decompressedRes );
  }
  else
  {
    mBuffer.Clear();
    mBuffer.Append( objSize, pObj );
  }
  mPopMaster.SetBuffer( &mBuffer, 0 );
  return header.type;
}
//-----------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::Unpack( char* packedData, int size )
{
    auto type = PrepareForUnpackPopMaster( packedData, size );
    switch( type )
    {
        case e_nsReflectionCodeGenerator_TBinaryMarshallerGeneratorConfig:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TClassDesc:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TClassDesc>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TConfig:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TConfig>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TEntityManagerGeneratorConfig:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TEntityManagerGeneratorConfig>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TFilter:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TFilter>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TImplementation:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TImplementation>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TJsonSerializerGeneratorConfig:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TReflectionGeneratorConfig:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TReflectionGeneratorConfig>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TSqlGeneratorConfig:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TSqlGeneratorConfig>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TTargetForCodeGeneration:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TTargetForCodeGeneration>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TTargetForParsing:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TTargetForParsing>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
        case e_nsReflectionCodeGenerator_TUnpackHandler:
        {
            auto p = Allocate<nsReflectionCodeGenerator::TUnpackHandler>();
            _Deserialize( p );
            TUnpackHandler::Handle( p );
        }
        break;
    }
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p )
{
    _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p );
    auto unpackHandler_p = &(p->unpackHandler);
    PushIsNotNullptr( unpackHandler_p );
    if ( unpackHandler_p )
        _Serialize( unpackHandler_p );
    mPushMaster.PushNum( p->beginID );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p )
{
    _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p );
    if ( PopIsNotNullptr() )
    {
        _Deserialize( &(p->unpackHandler) );
    }
    mPopMaster.PopNum( p->beginID );
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p )
{
    return e_nsReflectionCodeGenerator_TBinaryMarshallerGeneratorConfig;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p )
{
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TClassDesc* p )
{
    mPushMaster.PushStr( p->exportDeclaration );
    mPushMaster.PushStr( p->nameSpaceName );
    mPushMaster.PushStr( p->className );
    mPushMaster.PushStr( p->fileName );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TClassDesc* p )
{
    mPopMaster.PopStr( p->exportDeclaration );
    mPopMaster.PopStr( p->nameSpaceName );
    mPopMaster.PopStr( p->className );
    mPopMaster.PopStr( p->fileName );
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TClassDesc* p )
{
    return e_nsReflectionCodeGenerator_TClassDesc;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TClassDesc* p )
{
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TConfig* p )
{
    auto targetForParsing_p = &(p->targetForParsing);
    PushIsNotNullptr( targetForParsing_p );
    if ( targetForParsing_p )
        _Serialize( targetForParsing_p );
    auto filter_p = &(p->filter);
    PushIsNotNullptr( filter_p );
    if ( filter_p )
        _Serialize( filter_p );
    auto targetForCodeGeneration_p = &(p->targetForCodeGeneration);
    PushIsNotNullptr( targetForCodeGeneration_p );
    if ( targetForCodeGeneration_p )
        _Serialize( targetForCodeGeneration_p );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TConfig* p )
{
    if ( PopIsNotNullptr() )
    {
        _Deserialize( &(p->targetForParsing) );
    }
    if ( PopIsNotNullptr() )
    {
        _Deserialize( &(p->filter) );
    }
    if ( PopIsNotNullptr() )
    {
        _Deserialize( &(p->targetForCodeGeneration) );
    }
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TConfig* p )
{
    return e_nsReflectionCodeGenerator_TConfig;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TConfig* p )
{
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TEntityManagerGeneratorConfig* p )
{
    _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TEntityManagerGeneratorConfig* p )
{
    _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p );
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TEntityManagerGeneratorConfig* p )
{
    return e_nsReflectionCodeGenerator_TEntityManagerGeneratorConfig;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TEntityManagerGeneratorConfig* p )
{
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TFilter* p )
{
    mPushMaster.PushStr( p->attribute );
    
    TBinaryMaster::SizeType extensions_size0 = (TBinaryMaster::SizeType)(p->extensions.size());
    mPushMaster.PushNum( extensions_size0 );
    for ( auto& extensions_e0 : p->extensions )
    {
        mPushMaster.PushStr( extensions_e0 );
    }
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TFilter* p )
{
    mPopMaster.PopStr( p->attribute );
    
    p->extensions.clear();
    TBinaryMaster::SizeType extensions_size0;
    mPopMaster.PopNum( extensions_size0 );
    for ( TBinaryMaster::SizeType extensions_i0 = 0 ; extensions_i0 < extensions_size0 ; extensions_i0++ ) 
    {
        std::string extensions_key0;
        mPopMaster.PopStr( extensions_key0 );
        p->extensions.push_back( extensions_key0 );
    }
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TFilter* p )
{
    return e_nsReflectionCodeGenerator_TFilter;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TFilter* p )
{
    p->extensions.clear();
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TImplementation* p )
{
    auto jsonSerializer_p = p->jsonSerializer.get();
    PushIsNotNullptr( jsonSerializer_p );
    if ( jsonSerializer_p )
        _Serialize( jsonSerializer_p );
    auto binaryMarshaller_p = p->binaryMarshaller.get();
    PushIsNotNullptr( binaryMarshaller_p );
    if ( binaryMarshaller_p )
        _Serialize( binaryMarshaller_p );
    auto sql_p = p->sql.get();
    PushIsNotNullptr( sql_p );
    if ( sql_p )
        _Serialize( sql_p );
    auto reflection_p = p->reflection.get();
    PushIsNotNullptr( reflection_p );
    if ( reflection_p )
        _Serialize( reflection_p );
    auto entMngExt_p = p->entMngExt.get();
    PushIsNotNullptr( entMngExt_p );
    if ( entMngExt_p )
        _Serialize( entMngExt_p );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TImplementation* p )
{
    if ( PopIsNotNullptr() )
    {
        if ( p->jsonSerializer.get() == nullptr  )
            p->jsonSerializer.reset( new nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig() );
        _Deserialize( p->jsonSerializer.get() );
    }
    else
        p->jsonSerializer.reset();
    if ( PopIsNotNullptr() )
    {
        if ( p->binaryMarshaller.get() == nullptr  )
            p->binaryMarshaller.reset( new nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig() );
        _Deserialize( p->binaryMarshaller.get() );
    }
    else
        p->binaryMarshaller.reset();
    if ( PopIsNotNullptr() )
    {
        if ( p->sql.get() == nullptr  )
            p->sql.reset( new nsReflectionCodeGenerator::TSqlGeneratorConfig() );
        _Deserialize( p->sql.get() );
    }
    else
        p->sql.reset();
    if ( PopIsNotNullptr() )
    {
        if ( p->reflection.get() == nullptr  )
            p->reflection.reset( new nsReflectionCodeGenerator::TReflectionGeneratorConfig() );
        _Deserialize( p->reflection.get() );
    }
    else
        p->reflection.reset();
    if ( PopIsNotNullptr() )
    {
        if ( p->entMngExt.get() == nullptr  )
            p->entMngExt.reset( new nsReflectionCodeGenerator::TEntityManagerGeneratorConfig() );
        _Deserialize( p->entMngExt.get() );
    }
    else
        p->entMngExt.reset();
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TImplementation* p )
{
    return e_nsReflectionCodeGenerator_TImplementation;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TImplementation* p )
{
    p->jsonSerializer.reset();
    p->binaryMarshaller.reset();
    p->sql.reset();
    p->reflection.reset();
    p->entMngExt.reset();
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p )
{
    _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p )
{
    _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p );
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p )
{
    return e_nsReflectionCodeGenerator_TJsonSerializerGeneratorConfig;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p )
{
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TReflectionGeneratorConfig* p )
{
    _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TReflectionGeneratorConfig* p )
{
    _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p );
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TReflectionGeneratorConfig* p )
{
    return e_nsReflectionCodeGenerator_TReflectionGeneratorConfig;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TReflectionGeneratorConfig* p )
{
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TSqlGeneratorConfig* p )
{
    _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TSqlGeneratorConfig* p )
{
    _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p );
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TSqlGeneratorConfig* p )
{
    return e_nsReflectionCodeGenerator_TSqlGeneratorConfig;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TSqlGeneratorConfig* p )
{
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p )
{
    mPushMaster.PushStr( p->directory );
    mPushMaster.PushStr( p->includeListFileName );
    mPushMaster.PushStr( p->header );
    auto implementation_p = &(p->implementation);
    PushIsNotNullptr( implementation_p );
    if ( implementation_p )
        _Serialize( implementation_p );
    
    TBinaryMaster::SizeType typeCustomizerMap_size0 = (TBinaryMaster::SizeType)(p->typeCustomizerMap.size());
    mPushMaster.PushNum( typeCustomizerMap_size0 );
    for ( auto& typeCustomizerMap_e0 : p->typeCustomizerMap )
    {
        mPushMaster.PushStr( typeCustomizerMap_e0.first );
        mPushMaster.PushStr( typeCustomizerMap_e0.second );
    }
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p )
{
    mPopMaster.PopStr( p->directory );
    mPopMaster.PopStr( p->includeListFileName );
    mPopMaster.PopStr( p->header );
    if ( PopIsNotNullptr() )
    {
        _Deserialize( &(p->implementation) );
    }
    
    p->typeCustomizerMap.clear();
    TBinaryMaster::SizeType typeCustomizerMap_size0;
    mPopMaster.PopNum( typeCustomizerMap_size0 );
    for ( TBinaryMaster::SizeType typeCustomizerMap_i0 = 0 ; typeCustomizerMap_i0 < typeCustomizerMap_size0 ; typeCustomizerMap_i0++ ) 
    {
        std::string typeCustomizerMap_key0;
        mPopMaster.PopStr( typeCustomizerMap_key0 );
        std::string typeCustomizerMap_value0;
        mPopMaster.PopStr( typeCustomizerMap_value0 );
        p->typeCustomizerMap.insert( { typeCustomizerMap_key0, typeCustomizerMap_value0 } );
    }
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TTargetForCodeGeneration* p )
{
    return e_nsReflectionCodeGenerator_TTargetForCodeGeneration;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TTargetForCodeGeneration* p )
{
    p->typeCustomizerMap.clear();
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TTargetForParsing* p )
{
    
    TBinaryMaster::SizeType directories_size0 = (TBinaryMaster::SizeType)(p->directories.size());
    mPushMaster.PushNum( directories_size0 );
    for ( auto& directories_e0 : p->directories )
    {
        mPushMaster.PushStr( directories_e0 );
    }
    mPushMaster.PushBool( p->recursive );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TTargetForParsing* p )
{
    
    p->directories.clear();
    TBinaryMaster::SizeType directories_size0;
    mPopMaster.PopNum( directories_size0 );
    for ( TBinaryMaster::SizeType directories_i0 = 0 ; directories_i0 < directories_size0 ; directories_i0++ ) 
    {
        std::string directories_key0;
        mPopMaster.PopStr( directories_key0 );
        p->directories.push_back( directories_key0 );
    }
    mPopMaster.PopBool( p->recursive );
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TTargetForParsing* p )
{
    return e_nsReflectionCodeGenerator_TTargetForParsing;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TTargetForParsing* p )
{
    p->directories.clear();
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Serialize( nsReflectionCodeGenerator::TUnpackHandler* p )
{
    _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p );
    mPushMaster.PushStr( p->method );
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deserialize( nsReflectionCodeGenerator::TUnpackHandler* p )
{
    _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p );
    mPopMaster.PopStr( p->method );
}
//---------------------------------------------------------------------------------------
TBinaryMarshaller::TypeID TBinaryMarshaller::_GetTypeID( nsReflectionCodeGenerator::TUnpackHandler* p )
{
    return e_nsReflectionCodeGenerator_TUnpackHandler;
}
//---------------------------------------------------------------------------------------
void TBinaryMarshaller::_Deallocate( nsReflectionCodeGenerator::TUnpackHandler* p )
{
}
//---------------------------------------------------------------------------------------
