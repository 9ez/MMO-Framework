/*
Author: Gudakov Ramil Sergeevich a.k.a.Gauss
Гудаков Рамиль Сергеевич
Contacts : [ramil2085@mail.ru, ramil2085@gmail.com]
See for more information License.h.
*/
// File has been generated by ReflectionCodeGenerator version 0.48 build 9, at 2019_01_20 01:02:33.525
	
#include "JsonSerializer.h"
#include "fmt/core.h"
#include "JsonPopMaster.h"
#include "JsonPushMaster.h"

using namespace nsJson;

using POM = TJsonPopMaster;
using PUM = TJsonPushMaster;

void TJsonSerializer::_Serialize( TBaseStruct* p, Jobj& obj )
{
  PUM::Push( obj, "s", p->s );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TBaseStruct* p, const json11::Json& json )
{
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TTestClass* p, Jobj& obj )
{
  Jobj ts_obj;
  _Serialize( &(p->ts), ts_obj );
  PUM::Push( obj, "str", p->str );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TTestClass* p, const json11::Json& json )
{
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TTestStruct* p, Jobj& obj )
{
  _Serialize( (TBaseStruct*)p, obj);
  PUM::Push( obj, "password", p->password );
  PUM::Push( obj, "port", p->port );
  PUM::Push( obj, "flag", p->flag );
  PUM::Push( obj, "numList", p->numList );
  PUM::Push( obj, "strSet", p->strSet );
  PUM::Push( obj, "numVector", p->numVector );
  PUM::Push( obj, "intSet", p->intSet );
  PUM::PushMap( obj, "intStrMap", p->intStrMap );
  PUM::PushMap( obj, "strStrMap", p->strStrMap );
  PUM::PushMap( obj, "strIntMap", p->strIntMap );
  PUM::PushMap( obj, "strBoolMap", p->strBoolMap );
  PUM::PushSerObjArray<TBaseStruct, TBaseStruct>( obj, "baseVec", p->baseVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerPtrArray<TBaseStruct, TBaseStruct*>( obj, "basePtrVec", p->basePtrVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerSmartPtrArray<TBaseStruct, std::shared_ptr<TBaseStruct>>( obj, "baseSPVec", p->baseSPVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TTestStruct* p, const json11::Json& json )
{
  _Deserialize( (TBaseStruct*)p, json);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
  Jobj deserializationHandler_obj;
  _Serialize( &(p->deserializationHandler), deserializationHandler_obj );
  PUM::Push( obj, "beginID", p->beginID );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TClassDesc* p, Jobj& obj )
{
  PUM::Push( obj, "exportDeclaration", p->exportDeclaration );
  PUM::Push( obj, "nameSpaceName", p->nameSpaceName );
  PUM::Push( obj, "className", p->className );
  PUM::Push( obj, "fileName", p->fileName );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TClassDesc* p, const json11::Json& json )
{
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TConfig* p, Jobj& obj )
{
  Jobj targetForParsing_obj;
  _Serialize( &(p->targetForParsing), targetForParsing_obj );
  Jobj filter_obj;
  _Serialize( &(p->filter), filter_obj );
  Jobj targetForCodeGeneration_obj;
  _Serialize( &(p->targetForCodeGeneration), targetForCodeGeneration_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TConfig* p, const json11::Json& json )
{
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TDeserializationHandler* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
  PUM::Push( obj, "method", p->method );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TDeserializationHandler* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TFilter* p, Jobj& obj )
{
  PUM::Push( obj, "attribute", p->attribute );
  PUM::Push( obj, "extensions", p->extensions );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TFilter* p, const json11::Json& json )
{
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TImplementation* p, Jobj& obj )
{
  Jobj jsonSerializer_obj;
  _Serialize( p->jsonSerializer.get(), jsonSerializer_obj );
  Jobj binaryMarshaller_obj;
  _Serialize( p->binaryMarshaller.get(), binaryMarshaller_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TImplementation* p, const json11::Json& json )
{
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p, Jobj& obj )
{
  PUM::Push( obj, "directory", p->directory );
  PUM::Push( obj, "includeListFileName", p->includeListFileName );
  Jobj implementation_obj;
  _Serialize( &(p->implementation), implementation_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p, const json11::Json& json )
{
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TTargetForParsing* p, Jobj& obj )
{
  PUM::Push( obj, "directories", p->directories );
  PUM::Push( obj, "recursive", p->recursive );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TTargetForParsing* p, const json11::Json& json )
{
}
//---------------------------------------------------------------------------------------
