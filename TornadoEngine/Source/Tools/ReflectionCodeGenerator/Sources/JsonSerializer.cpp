/*
Author: Gudakov Ramil Sergeevich a.k.a.Gauss
Гудаков Рамиль Сергеевич
Contacts : [ramil2085@mail.ru, ramil2085@gmail.com]
See for more information License.h.
*/
// File has been generated by ReflectionCodeGenerator version 0.50 build 12, at 2019_01_22 15:06:01.260
	
#include "JsonSerializer.h"
#include "fmt/core.h"
#include "JsonPopMaster.h"
#include "JsonPushMaster.h"

using namespace nsJson;

using POM = TJsonPopMaster;
using PUM = TJsonPushMaster;

void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
  Jobj unpackHandler_obj;
  _Serialize( &(p->unpackHandler), unpackHandler_obj );
  PUM::Push( obj, "unpackHandler", unpackHandler_obj );
  PUM::Push( obj, "beginID", p->beginID );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
  auto& unpackHandler_json = json["unpackHandler"];
  _Deserialize( &(p->unpackHandler), unpackHandler_json );
  POM::PopNum( json, "beginID", p->beginID );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TClassDesc* p, Jobj& obj )
{
  PUM::Push( obj, "exportDeclaration", p->exportDeclaration );
  PUM::Push( obj, "nameSpaceName", p->nameSpaceName );
  PUM::Push( obj, "className", p->className );
  PUM::Push( obj, "fileName", p->fileName );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TClassDesc* p, const json11::Json& json )
{
  POM::PopStr( json, "exportDeclaration", p->exportDeclaration );
  POM::PopStr( json, "nameSpaceName", p->nameSpaceName );
  POM::PopStr( json, "className", p->className );
  POM::PopStr( json, "fileName", p->fileName );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TConfig* p, Jobj& obj )
{
  Jobj targetForParsing_obj;
  _Serialize( &(p->targetForParsing), targetForParsing_obj );
  PUM::Push( obj, "targetForParsing", targetForParsing_obj );
  Jobj filter_obj;
  _Serialize( &(p->filter), filter_obj );
  PUM::Push( obj, "filter", filter_obj );
  Jobj targetForCodeGeneration_obj;
  _Serialize( &(p->targetForCodeGeneration), targetForCodeGeneration_obj );
  PUM::Push( obj, "targetForCodeGeneration", targetForCodeGeneration_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TConfig* p, const json11::Json& json )
{
  auto& targetForParsing_json = json["targetForParsing"];
  _Deserialize( &(p->targetForParsing), targetForParsing_json );
  auto& filter_json = json["filter"];
  _Deserialize( &(p->filter), filter_json );
  auto& targetForCodeGeneration_json = json["targetForCodeGeneration"];
  _Deserialize( &(p->targetForCodeGeneration), targetForCodeGeneration_json );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TFilter* p, Jobj& obj )
{
  PUM::Push( obj, "attribute", p->attribute );
  PUM::Push( obj, "extensions", p->extensions );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TFilter* p, const json11::Json& json )
{
  POM::PopStr( json, "attribute", p->attribute );
  POM::PopStrArray( json, "extensions", p->extensions );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TImplementation* p, Jobj& obj )
{
  Jobj jsonSerializer_obj;
  auto p_jsonSerializer = p->jsonSerializer.get();
  if ( p_jsonSerializer )
  {
    _Serialize( p_jsonSerializer, jsonSerializer_obj );
    PUM::Push( obj, "jsonSerializer", jsonSerializer_obj );
  }
  else
    PUM::PushNull( obj, "jsonSerializer" );
  Jobj binaryMarshaller_obj;
  auto p_binaryMarshaller = p->binaryMarshaller.get();
  if ( p_binaryMarshaller )
  {
    _Serialize( p_binaryMarshaller, binaryMarshaller_obj );
    PUM::Push( obj, "binaryMarshaller", binaryMarshaller_obj );
  }
  else
    PUM::PushNull( obj, "binaryMarshaller" );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TImplementation* p, const json11::Json& json )
{
  auto& jsonSerializer_json = json["jsonSerializer"];
  if ( jsonSerializer_json.is_null() == false )
  {
    if ( p->jsonSerializer.get() == nullptr )
      p->jsonSerializer.reset( new nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig() );
    _Deserialize( p->jsonSerializer.get(), jsonSerializer_json );
  }
  auto& binaryMarshaller_json = json["binaryMarshaller"];
  if ( binaryMarshaller_json.is_null() == false )
  {
    if ( p->binaryMarshaller.get() == nullptr )
      p->binaryMarshaller.reset( new nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig() );
    _Deserialize( p->binaryMarshaller.get(), binaryMarshaller_json );
  }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p, Jobj& obj )
{
  PUM::Push( obj, "directory", p->directory );
  PUM::Push( obj, "includeListFileName", p->includeListFileName );
  Jobj implementation_obj;
  _Serialize( &(p->implementation), implementation_obj );
  PUM::Push( obj, "implementation", implementation_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p, const json11::Json& json )
{
  POM::PopStr( json, "directory", p->directory );
  POM::PopStr( json, "includeListFileName", p->includeListFileName );
  auto& implementation_json = json["implementation"];
  _Deserialize( &(p->implementation), implementation_json );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TTargetForParsing* p, Jobj& obj )
{
  PUM::Push( obj, "directories", p->directories );
  PUM::Push( obj, "recursive", p->recursive );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TTargetForParsing* p, const json11::Json& json )
{
  POM::PopStrArray( json, "directories", p->directories );
  POM::PopBool( json, "recursive", p->recursive );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TUnpackHandler* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
  PUM::Push( obj, "method", p->method );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TUnpackHandler* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
  POM::PopStr( json, "method", p->method );
}
//---------------------------------------------------------------------------------------
