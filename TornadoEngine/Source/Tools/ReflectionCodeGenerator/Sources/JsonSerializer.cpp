/*
Author: Gudakov Ramil Sergeevich a.k.a.Gauss
Гудаков Рамиль Сергеевич
Contacts : [ramil2085@mail.ru, ramil2085@gmail.com]
See for more information License.h.
*/
// File has been generated by ReflectionCodeGenerator version 0.50 build 12, at 2019_01_21 13:27:14.131
	
#include "JsonSerializer.h"
#include "fmt/core.h"
#include "JsonPopMaster.h"
#include "JsonPushMaster.h"

using namespace nsJson;

using POM = TJsonPopMaster;
using PUM = TJsonPushMaster;

void TJsonSerializer::_Serialize( TBaseStruct* p, Jobj& obj )
{
  PUM::Push( obj, "s", p->s );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TBaseStruct* p, const json11::Json& json )
{
  POM::PopStr( json, "s", p->s );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TTestClass* p, Jobj& obj )
{
  Jobj ts_obj;
  _Serialize( &(p->ts), ts_obj );
  PUM::Push( obj, "ts", ts_obj );
  PUM::Push( obj, "str", p->str );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TTestClass* p, const json11::Json& json )
{
  auto& ts_json = json["ts"];
  _Deserialize( &(p->ts), ts_json );
  POM::PopStr( json, "str", p->str );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( TTestStruct* p, Jobj& obj )
{
  _Serialize( (TBaseStruct*)p, obj);
  PUM::Push( obj, "password", p->password );
  PUM::Push( obj, "port", p->port );
  PUM::Push( obj, "flag", p->flag );
  PUM::Push( obj, "numList", p->numList );
  PUM::Push( obj, "strSet", p->strSet );
  PUM::Push( obj, "numVector", p->numVector );
  PUM::Push( obj, "intSet", p->intSet );
  PUM::PushMap( obj, "intStrMap", p->intStrMap );
  PUM::PushMap( obj, "strStrMap", p->strStrMap );
  PUM::PushMap( obj, "strIntMap", p->strIntMap );
  PUM::PushMap( obj, "strBoolMap", p->strBoolMap );
  PUM::PushMap( obj, "intFloatMap", p->intFloatMap );
  PUM::PushMap( obj, "intBoolMap", p->intBoolMap );
  PUM::PushSerObjArray<TBaseStruct, TBaseStruct>( obj, "baseVec", p->baseVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerPtrArray<TBaseStruct, TBaseStruct*>( obj, "basePtrVec", p->basePtrVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerSmartPtrArray<TBaseStruct, std::shared_ptr<TBaseStruct>>( obj, "baseSPVec", p->baseSPVec, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerObjMap<TBaseStruct, TBaseStruct>( obj, "strBaseMap", p->strBaseMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerPtrMap<TBaseStruct, TBaseStruct*>( obj, "strBasePtrMap", p->strBasePtrMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerSmartPtrMap<TBaseStruct, std::shared_ptr<TBaseStruct>>( obj, "strBaseSPMap", p->strBaseSPMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerObjMap<TBaseStruct, TBaseStruct>( obj, "intBaseMap", p->intBaseMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerPtrMap<TBaseStruct, TBaseStruct*>( obj, "intBasePtrMap", p->intBasePtrMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
  PUM::PushSerSmartPtrMap<TBaseStruct, std::shared_ptr<TBaseStruct>>( obj, "intBaseSPMap", p->intBaseSPMap, []( TBaseStruct* p, Jobj& obj ) { _Serialize( p, obj ); } );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( TTestStruct* p, const json11::Json& json )
{
  _Deserialize( (TBaseStruct*)p, json);
  POM::PopStr( json, "password", p->password );
  POM::PopNum( json, "port", p->port );
  POM::PopBool( json, "flag", p->flag );
  POM::PopNumArray<int>( json, "numList", p->numList );
  POM::PopStrSet( json, "strSet", p->strSet );
  POM::PopNumArray<int>( json, "numVector", p->numVector );
  POM::PopNumSet<int>( json, "intSet", p->intSet );
  POM::PopNumStrMap( json, "intStrMap", p->intStrMap );
  POM::PopStrStrMap( json, "strStrMap", p->strStrMap );
  POM::PopStrNumMap( json, "strIntMap", p->strIntMap );
  POM::PopStrBoolMap( json, "strBoolMap", p->strBoolMap );
  POM::PopNumNumMap( json, "intFloatMap", p->intFloatMap );
  POM::PopNumBoolMap( json, "intBoolMap", p->intBoolMap );
  POM::PopSerObjArray<TBaseStruct>( json, "baseVec", p->baseVec, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopSerPtrArray<TBaseStruct>( json, "basePtrVec", p->basePtrVec, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopSerSmartPtrArray<TBaseStruct, std::shared_ptr<TBaseStruct>>( json, "baseSPVec", p->baseSPVec, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); }, [](){ return std::shared_ptr<TBaseStruct>( new TBaseStruct() );} );
  POM::PopStrSerObjMap<TBaseStruct>( json, "strBaseMap", p->strBaseMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopStrSerPtrMap<TBaseStruct>( json, "strBasePtrMap", p->strBasePtrMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopStrSerSmartPtrMap<TBaseStruct, std::shared_ptr<TBaseStruct>>( json, "strBaseSPMap", p->strBaseSPMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); }, [](){ return std::shared_ptr<TBaseStruct>( new TBaseStruct() );} );
  POM::PopNumSerObjMap<int, TBaseStruct>( json, "intBaseMap", p->intBaseMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopNumSerPtrMap<int, TBaseStruct>( json, "intBasePtrMap", p->intBasePtrMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); } );
  POM::PopNumSerSmartPtrMap<int, TBaseStruct, std::shared_ptr<TBaseStruct>>( json, "intBaseSPMap", p->intBaseSPMap, []( TBaseStruct* p, const json11::Json& json ) { _Deserialize( p, json ); }, [](){ return std::shared_ptr<TBaseStruct>( new TBaseStruct() );} );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
  Jobj deserializationHandler_obj;
  _Serialize( &(p->deserializationHandler), deserializationHandler_obj );
  PUM::Push( obj, "deserializationHandler", deserializationHandler_obj );
  PUM::Push( obj, "beginID", p->beginID );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
  auto& deserializationHandler_json = json["deserializationHandler"];
  _Deserialize( &(p->deserializationHandler), deserializationHandler_json );
  POM::PopNum( json, "beginID", p->beginID );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TClassDesc* p, Jobj& obj )
{
  PUM::Push( obj, "exportDeclaration", p->exportDeclaration );
  PUM::Push( obj, "nameSpaceName", p->nameSpaceName );
  PUM::Push( obj, "className", p->className );
  PUM::Push( obj, "fileName", p->fileName );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TClassDesc* p, const json11::Json& json )
{
  POM::PopStr( json, "exportDeclaration", p->exportDeclaration );
  POM::PopStr( json, "nameSpaceName", p->nameSpaceName );
  POM::PopStr( json, "className", p->className );
  POM::PopStr( json, "fileName", p->fileName );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TConfig* p, Jobj& obj )
{
  Jobj targetForParsing_obj;
  _Serialize( &(p->targetForParsing), targetForParsing_obj );
  PUM::Push( obj, "targetForParsing", targetForParsing_obj );
  Jobj filter_obj;
  _Serialize( &(p->filter), filter_obj );
  PUM::Push( obj, "filter", filter_obj );
  Jobj targetForCodeGeneration_obj;
  _Serialize( &(p->targetForCodeGeneration), targetForCodeGeneration_obj );
  PUM::Push( obj, "targetForCodeGeneration", targetForCodeGeneration_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TConfig* p, const json11::Json& json )
{
  auto& targetForParsing_json = json["targetForParsing"];
  _Deserialize( &(p->targetForParsing), targetForParsing_json );
  auto& filter_json = json["filter"];
  _Deserialize( &(p->filter), filter_json );
  auto& targetForCodeGeneration_json = json["targetForCodeGeneration"];
  _Deserialize( &(p->targetForCodeGeneration), targetForCodeGeneration_json );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TDeserializationHandler* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
  PUM::Push( obj, "method", p->method );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TDeserializationHandler* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
  POM::PopStr( json, "method", p->method );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TFilter* p, Jobj& obj )
{
  PUM::Push( obj, "attribute", p->attribute );
  PUM::Push( obj, "extensions", p->extensions );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TFilter* p, const json11::Json& json )
{
  POM::PopStr( json, "attribute", p->attribute );
  POM::PopStrArray( json, "extensions", p->extensions );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TImplementation* p, Jobj& obj )
{
  Jobj jsonSerializer_obj;
  _Serialize( p->jsonSerializer.get(), jsonSerializer_obj );
  PUM::Push( obj, "jsonSerializer", jsonSerializer_obj );
  Jobj binaryMarshaller_obj;
  _Serialize( p->binaryMarshaller.get(), binaryMarshaller_obj );
  PUM::Push( obj, "binaryMarshaller", binaryMarshaller_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TImplementation* p, const json11::Json& json )
{
  auto& jsonSerializer_json = json["jsonSerializer"];
  if( p->jsonSerializer.get() == nullptr )
    p->jsonSerializer.reset( new nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig() );
  _Deserialize( p->jsonSerializer.get(), jsonSerializer_json );
  auto& binaryMarshaller_json = json["binaryMarshaller"];
  if( p->binaryMarshaller.get() == nullptr )
    p->binaryMarshaller.reset( new nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig() );
  _Deserialize( p->binaryMarshaller.get(), binaryMarshaller_json );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, Jobj& obj )
{
  _Serialize( (nsReflectionCodeGenerator::TClassDesc*)p, obj);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, const json11::Json& json )
{
  _Deserialize( (nsReflectionCodeGenerator::TClassDesc*)p, json);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p, Jobj& obj )
{
  PUM::Push( obj, "directory", p->directory );
  PUM::Push( obj, "includeListFileName", p->includeListFileName );
  Jobj implementation_obj;
  _Serialize( &(p->implementation), implementation_obj );
  PUM::Push( obj, "implementation", implementation_obj );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p, const json11::Json& json )
{
  POM::PopStr( json, "directory", p->directory );
  POM::PopStr( json, "includeListFileName", p->includeListFileName );
  auto& implementation_json = json["implementation"];
  _Deserialize( &(p->implementation), implementation_json );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize( nsReflectionCodeGenerator::TTargetForParsing* p, Jobj& obj )
{
  PUM::Push( obj, "directories", p->directories );
  PUM::Push( obj, "recursive", p->recursive );
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize( nsReflectionCodeGenerator::TTargetForParsing* p, const json11::Json& json )
{
  POM::PopStrArray( json, "directories", p->directories );
  POM::PopBool( json, "recursive", p->recursive );
}
//---------------------------------------------------------------------------------------
