/*
    ReflectionCodeGenerator
*/
// File has been generated by ReflectionCodeGenerator version 1.18 build 46, at 2020_10_08 08:24:32.800

#include "JsonSerializer.h"
#include "JsonPopMaster.h"
#include "JsonPushMaster.h"

using namespace nsJson;

using POM = TJsonPopMaster;
using PUM = TJsonPushMaster;

std::map<std::string, TJsonSerializer::TypeFunc> TJsonSerializer::mTypeNameFuncsMap;
std::list<std::string> TJsonSerializer::mTypeNameList;

void TJsonSerializer::Init()
{
    static bool isNeedInit = true;
    if ( !isNeedInit ) {
        return;
    }
    isNeedInit = false;

    TypeFunc _nsReflectionCodeGenerator_TBinaryMarshallerGeneratorConfigTypeFunc;
    _nsReflectionCodeGenerator_TBinaryMarshallerGeneratorConfigTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig>((nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig*) p, str);
    };
    _nsReflectionCodeGenerator_TBinaryMarshallerGeneratorConfigTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig>((nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TBinaryMarshallerGeneratorConfigTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig>((nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig", _nsReflectionCodeGenerator_TBinaryMarshallerGeneratorConfigTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig");

    TypeFunc _nsReflectionCodeGenerator_TClassDescTypeFunc;
    _nsReflectionCodeGenerator_TClassDescTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TClassDesc>((nsReflectionCodeGenerator::TClassDesc*) p, str);
    };
    _nsReflectionCodeGenerator_TClassDescTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TClassDesc>((nsReflectionCodeGenerator::TClassDesc*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TClassDescTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TClassDesc>((nsReflectionCodeGenerator::TClassDesc*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TClassDesc", _nsReflectionCodeGenerator_TClassDescTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TClassDesc");

    TypeFunc _nsReflectionCodeGenerator_TConfigTypeFunc;
    _nsReflectionCodeGenerator_TConfigTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TConfig>((nsReflectionCodeGenerator::TConfig*) p, str);
    };
    _nsReflectionCodeGenerator_TConfigTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TConfig>((nsReflectionCodeGenerator::TConfig*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TConfigTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TConfig>((nsReflectionCodeGenerator::TConfig*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TConfig", _nsReflectionCodeGenerator_TConfigTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TConfig");

    TypeFunc _nsReflectionCodeGenerator_TEntityManagerGeneratorConfigTypeFunc;
    _nsReflectionCodeGenerator_TEntityManagerGeneratorConfigTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TEntityManagerGeneratorConfig>((nsReflectionCodeGenerator::TEntityManagerGeneratorConfig*) p, str);
    };
    _nsReflectionCodeGenerator_TEntityManagerGeneratorConfigTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TEntityManagerGeneratorConfig>((nsReflectionCodeGenerator::TEntityManagerGeneratorConfig*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TEntityManagerGeneratorConfigTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TEntityManagerGeneratorConfig>((nsReflectionCodeGenerator::TEntityManagerGeneratorConfig*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TEntityManagerGeneratorConfig", _nsReflectionCodeGenerator_TEntityManagerGeneratorConfigTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TEntityManagerGeneratorConfig");

    TypeFunc _nsReflectionCodeGenerator_TExternalSourceTypeFunc;
    _nsReflectionCodeGenerator_TExternalSourceTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TExternalSource>((nsReflectionCodeGenerator::TExternalSource*) p, str);
    };
    _nsReflectionCodeGenerator_TExternalSourceTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TExternalSource>((nsReflectionCodeGenerator::TExternalSource*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TExternalSourceTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TExternalSource>((nsReflectionCodeGenerator::TExternalSource*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TExternalSource", _nsReflectionCodeGenerator_TExternalSourceTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TExternalSource");

    TypeFunc _nsReflectionCodeGenerator_TExternalSourceListTypeFunc;
    _nsReflectionCodeGenerator_TExternalSourceListTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TExternalSourceList>((nsReflectionCodeGenerator::TExternalSourceList*) p, str);
    };
    _nsReflectionCodeGenerator_TExternalSourceListTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TExternalSourceList>((nsReflectionCodeGenerator::TExternalSourceList*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TExternalSourceListTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TExternalSourceList>((nsReflectionCodeGenerator::TExternalSourceList*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TExternalSourceList", _nsReflectionCodeGenerator_TExternalSourceListTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TExternalSourceList");

    TypeFunc _nsReflectionCodeGenerator_TExternalSourcesTypeFunc;
    _nsReflectionCodeGenerator_TExternalSourcesTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TExternalSources>((nsReflectionCodeGenerator::TExternalSources*) p, str);
    };
    _nsReflectionCodeGenerator_TExternalSourcesTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TExternalSources>((nsReflectionCodeGenerator::TExternalSources*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TExternalSourcesTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TExternalSources>((nsReflectionCodeGenerator::TExternalSources*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TExternalSources", _nsReflectionCodeGenerator_TExternalSourcesTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TExternalSources");

    TypeFunc _nsReflectionCodeGenerator_TFilterTypeFunc;
    _nsReflectionCodeGenerator_TFilterTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TFilter>((nsReflectionCodeGenerator::TFilter*) p, str);
    };
    _nsReflectionCodeGenerator_TFilterTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TFilter>((nsReflectionCodeGenerator::TFilter*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TFilterTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TFilter>((nsReflectionCodeGenerator::TFilter*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TFilter", _nsReflectionCodeGenerator_TFilterTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TFilter");

    TypeFunc _nsReflectionCodeGenerator_TImplementationTypeFunc;
    _nsReflectionCodeGenerator_TImplementationTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TImplementation>((nsReflectionCodeGenerator::TImplementation*) p, str);
    };
    _nsReflectionCodeGenerator_TImplementationTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TImplementation>((nsReflectionCodeGenerator::TImplementation*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TImplementationTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TImplementation>((nsReflectionCodeGenerator::TImplementation*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TImplementation", _nsReflectionCodeGenerator_TImplementationTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TImplementation");

    TypeFunc _nsReflectionCodeGenerator_TJsonSerializerGeneratorConfigTypeFunc;
    _nsReflectionCodeGenerator_TJsonSerializerGeneratorConfigTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig>((nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig*) p, str);
    };
    _nsReflectionCodeGenerator_TJsonSerializerGeneratorConfigTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig>((nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TJsonSerializerGeneratorConfigTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig>((nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig", _nsReflectionCodeGenerator_TJsonSerializerGeneratorConfigTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig");

    TypeFunc _nsReflectionCodeGenerator_TReflectionGeneratorConfigTypeFunc;
    _nsReflectionCodeGenerator_TReflectionGeneratorConfigTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TReflectionGeneratorConfig>((nsReflectionCodeGenerator::TReflectionGeneratorConfig*) p, str);
    };
    _nsReflectionCodeGenerator_TReflectionGeneratorConfigTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TReflectionGeneratorConfig>((nsReflectionCodeGenerator::TReflectionGeneratorConfig*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TReflectionGeneratorConfigTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TReflectionGeneratorConfig>((nsReflectionCodeGenerator::TReflectionGeneratorConfig*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TReflectionGeneratorConfig", _nsReflectionCodeGenerator_TReflectionGeneratorConfigTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TReflectionGeneratorConfig");

    TypeFunc _nsReflectionCodeGenerator_TSerializerTypeFunc;
    _nsReflectionCodeGenerator_TSerializerTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TSerializer>((nsReflectionCodeGenerator::TSerializer*) p, str);
    };
    _nsReflectionCodeGenerator_TSerializerTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TSerializer>((nsReflectionCodeGenerator::TSerializer*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TSerializerTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TSerializer>((nsReflectionCodeGenerator::TSerializer*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TSerializer", _nsReflectionCodeGenerator_TSerializerTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TSerializer");

    TypeFunc _nsReflectionCodeGenerator_TSqlGeneratorConfigTypeFunc;
    _nsReflectionCodeGenerator_TSqlGeneratorConfigTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TSqlGeneratorConfig>((nsReflectionCodeGenerator::TSqlGeneratorConfig*) p, str);
    };
    _nsReflectionCodeGenerator_TSqlGeneratorConfigTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TSqlGeneratorConfig>((nsReflectionCodeGenerator::TSqlGeneratorConfig*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TSqlGeneratorConfigTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TSqlGeneratorConfig>((nsReflectionCodeGenerator::TSqlGeneratorConfig*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TSqlGeneratorConfig", _nsReflectionCodeGenerator_TSqlGeneratorConfigTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TSqlGeneratorConfig");

    TypeFunc _nsReflectionCodeGenerator_TTargetForCodeGenerationTypeFunc;
    _nsReflectionCodeGenerator_TTargetForCodeGenerationTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TTargetForCodeGeneration>((nsReflectionCodeGenerator::TTargetForCodeGeneration*) p, str);
    };
    _nsReflectionCodeGenerator_TTargetForCodeGenerationTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TTargetForCodeGeneration>((nsReflectionCodeGenerator::TTargetForCodeGeneration*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TTargetForCodeGenerationTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TTargetForCodeGeneration>((nsReflectionCodeGenerator::TTargetForCodeGeneration*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TTargetForCodeGeneration", _nsReflectionCodeGenerator_TTargetForCodeGenerationTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TTargetForCodeGeneration");

    TypeFunc _nsReflectionCodeGenerator_TTargetForParsingTypeFunc;
    _nsReflectionCodeGenerator_TTargetForParsingTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TTargetForParsing>((nsReflectionCodeGenerator::TTargetForParsing*) p, str);
    };
    _nsReflectionCodeGenerator_TTargetForParsingTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TTargetForParsing>((nsReflectionCodeGenerator::TTargetForParsing*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TTargetForParsingTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TTargetForParsing>((nsReflectionCodeGenerator::TTargetForParsing*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TTargetForParsing", _nsReflectionCodeGenerator_TTargetForParsingTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TTargetForParsing");

    TypeFunc _nsReflectionCodeGenerator_TUnpackHandlerTypeFunc;
    _nsReflectionCodeGenerator_TUnpackHandlerTypeFunc.serializeFunc = [] (void* p, std::string& str) {
        Serialize<nsReflectionCodeGenerator::TUnpackHandler>((nsReflectionCodeGenerator::TUnpackHandler*) p, str);
    };
    _nsReflectionCodeGenerator_TUnpackHandlerTypeFunc.deserializeFunc = [] (void*& p, const std::string& str, std::string& err) {
        return Deserialize<nsReflectionCodeGenerator::TUnpackHandler>((nsReflectionCodeGenerator::TUnpackHandler*&) p, str, err);
    };
    _nsReflectionCodeGenerator_TUnpackHandlerTypeFunc.fillFunc = [] (void* p, const std::string& str, std::string& err) {
        return Fill<nsReflectionCodeGenerator::TUnpackHandler>((nsReflectionCodeGenerator::TUnpackHandler*) p, str, err);
    };
    mTypeNameFuncsMap.insert({ "nsReflectionCodeGenerator::TUnpackHandler", _nsReflectionCodeGenerator_TUnpackHandlerTypeFunc });
    mTypeNameList.push_back("nsReflectionCodeGenerator::TUnpackHandler");

}
//---------------------------------------------------------------------------------------
const std::list<std::string>& TJsonSerializer::GetTypeNameList()
{
    Init();
    return mTypeNameList;
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::Serialize(void* p, std::string& str, const std::string& typeName)
{
    Init();
    mTypeNameFuncsMap[typeName].serializeFunc(p, str);
}
//---------------------------------------------------------------------------------------
bool TJsonSerializer::Deserialize(void*& p, const std::string& str, const std::string& typeName, std::string& err)
{
    Init();
    return mTypeNameFuncsMap[typeName].deserializeFunc(p, str, err);
}
//---------------------------------------------------------------------------------------
bool TJsonSerializer::Fill(void* p, const std::string& str, const std::string& typeName, std::string& err)
{
    Init();
    return mTypeNameFuncsMap[typeName].fillFunc(p, str, err);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, Jobj& obj)
{
    _Serialize((nsReflectionCodeGenerator::TSerializer*)p, obj);// Inheritances
    if ( p->unpackHandler.get() == nullptr ) {
        PUM::PushNull(obj, "unpackHandler");
    } else {
        auto unpackHandler_o = PUM::AddObject(obj, "unpackHandler");
        _Serialize(p->unpackHandler.get(), unpackHandler_o);
    }
    PUM::Push(obj, "beginID", p->beginID);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, const Jobj& obj)
{
    _Deserialize((nsReflectionCodeGenerator::TSerializer*)p, obj);// Inheritances
    if ( POM::IsExist(obj, "unpackHandler") && !POM::IsNull(obj, "unpackHandler") ) {
        if ( p->unpackHandler.get() == nullptr ) {
            p->unpackHandler.reset(new nsReflectionCodeGenerator::TUnpackHandler());
        }
        auto unpackHandler_o0 = POM::FindObject(obj, "unpackHandler");
        _Deserialize(p->unpackHandler.get(), unpackHandler_o0);
    }
    POM::PopNum(obj, "beginID", p->beginID);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TClassDesc* p, Jobj& obj)
{
    PUM::Push(obj, "exportDeclaration", p->exportDeclaration);
    PUM::Push(obj, "nameSpaceName", p->nameSpaceName);
    PUM::Push(obj, "className", p->className);
    PUM::Push(obj, "fileName", p->fileName);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TClassDesc* p, const Jobj& obj)
{
    POM::PopStr(obj, "exportDeclaration", p->exportDeclaration);
    POM::PopStr(obj, "nameSpaceName", p->nameSpaceName);
    POM::PopStr(obj, "className", p->className);
    POM::PopStr(obj, "fileName", p->fileName);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TConfig* p, Jobj& obj)
{
    auto targetForParsing_o = PUM::AddObject(obj, "targetForParsing");
    _Serialize(&(p->targetForParsing), targetForParsing_o);
    auto filter_o = PUM::AddObject(obj, "filter");
    _Serialize(&(p->filter), filter_o);
    auto targetForCodeGeneration_o = PUM::AddObject(obj, "targetForCodeGeneration");
    _Serialize(&(p->targetForCodeGeneration), targetForCodeGeneration_o);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TConfig* p, const Jobj& obj)
{
    auto targetForParsing_o0 = POM::FindObject(obj, "targetForParsing");
    _Deserialize(&(p->targetForParsing), targetForParsing_o0);
    auto filter_o0 = POM::FindObject(obj, "filter");
    _Deserialize(&(p->filter), filter_o0);
    auto targetForCodeGeneration_o0 = POM::FindObject(obj, "targetForCodeGeneration");
    _Deserialize(&(p->targetForCodeGeneration), targetForCodeGeneration_o0);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TEntityManagerGeneratorConfig* p, Jobj& obj)
{
    _Serialize((nsReflectionCodeGenerator::TClassDesc*)p, obj);// Inheritances
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TEntityManagerGeneratorConfig* p, const Jobj& obj)
{
    _Deserialize((nsReflectionCodeGenerator::TClassDesc*)p, obj);// Inheritances
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TExternalSource* p, Jobj& obj)
{
    PUM::Push(obj, "fileName", p->fileName);
    PUM::Push(obj, "nameSpaceName", p->nameSpaceName);
    PUM::Push(obj, "className", p->className);
    PUM::Value nameSpaceWithType_a0(rapidjson::kArrayType);
    for ( auto& nameSpaceWithType_e0 : p->nameSpaceWithType ) {
        PUM::PushBack(nameSpaceWithType_a0, nameSpaceWithType_e0);
    }
    PUM::Push(obj, "nameSpaceWithType", nameSpaceWithType_a0);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TExternalSource* p, const Jobj& obj)
{
    POM::PopStr(obj, "fileName", p->fileName);
    POM::PopStr(obj, "nameSpaceName", p->nameSpaceName);
    POM::PopStr(obj, "className", p->className);
    if ( POM::IsArray(obj, "nameSpaceWithType") ) {
        auto nameSpaceWithType_a0 = POM::FindArray(obj, "nameSpaceWithType");
        for ( auto& nameSpaceWithType_e0 : nameSpaceWithType_a0 ) {
            p->nameSpaceWithType.insert(nameSpaceWithType_e0.GetString());
        }
    } else {
        std::string nameSpaceWithType_t0;
        POM::PopStr(obj, "nameSpaceWithType", nameSpaceWithType_t0);
        p->nameSpaceWithType.insert(nameSpaceWithType_t0);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TExternalSourceList* p, Jobj& obj)
{
    PUM::Value val_a0(rapidjson::kArrayType);
    for ( auto& val_e0 : p->val ) {
        PUM::Value val_a1(rapidjson::kObjectType);
        auto val_c1 = val_a1.GetObject();
        _Serialize(&val_e0, val_c1);
        PUM::PushBack(val_a0, val_a1);
    }
    PUM::Push(obj, "val", val_a0);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TExternalSourceList* p, const Jobj& obj)
{
    auto val_a0 = POM::FindArray(obj, "val");
    for ( auto& val_e0 : val_a0 ) {
        auto val_o1 = val_e0.GetObject();
        nsReflectionCodeGenerator::TExternalSource val_c1;
        _Deserialize(&val_c1, val_o1);
        p->val.push_back(val_c1);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TExternalSources* p, Jobj& obj)
{
    PUM::Value inFileList_a0(rapidjson::kArrayType);
    for ( auto& inFileList_e0 : p->inFileList ) {
        PUM::PushBack(inFileList_a0, inFileList_e0);
    }
    PUM::Push(obj, "inFileList", inFileList_a0);
    PUM::Push(obj, "outFile", p->outFile);
    if ( p->inExtSrcList.get() == nullptr ) {
        PUM::PushNull(obj, "inExtSrcList");
    } else {
        auto inExtSrcList_o = PUM::AddObject(obj, "inExtSrcList");
        _Serialize(p->inExtSrcList.get(), inExtSrcList_o);
    }
    if ( p->outExtSrc.get() == nullptr ) {
        PUM::PushNull(obj, "outExtSrc");
    } else {
        auto outExtSrc_o = PUM::AddObject(obj, "outExtSrc");
        _Serialize(p->outExtSrc.get(), outExtSrc_o);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TExternalSources* p, const Jobj& obj)
{
    if ( POM::IsArray(obj, "inFileList") ) {
        auto inFileList_a0 = POM::FindArray(obj, "inFileList");
        for ( auto& inFileList_e0 : inFileList_a0 ) {
            p->inFileList.push_back(inFileList_e0.GetString());
        }
    } else {
        std::string inFileList_t0;
        POM::PopStr(obj, "inFileList", inFileList_t0);
        p->inFileList.push_back(inFileList_t0);
    }
    POM::PopStr(obj, "outFile", p->outFile);
    if ( POM::IsExist(obj, "inExtSrcList") && !POM::IsNull(obj, "inExtSrcList") ) {
        if ( p->inExtSrcList.get() == nullptr ) {
            p->inExtSrcList.reset(new nsReflectionCodeGenerator::TExternalSourceList());
        }
        auto inExtSrcList_o0 = POM::FindObject(obj, "inExtSrcList");
        _Deserialize(p->inExtSrcList.get(), inExtSrcList_o0);
    }
    if ( POM::IsExist(obj, "outExtSrc") && !POM::IsNull(obj, "outExtSrc") ) {
        if ( p->outExtSrc.get() == nullptr ) {
            p->outExtSrc.reset(new nsReflectionCodeGenerator::TExternalSource());
        }
        auto outExtSrc_o0 = POM::FindObject(obj, "outExtSrc");
        _Deserialize(p->outExtSrc.get(), outExtSrc_o0);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TFilter* p, Jobj& obj)
{
    PUM::Push(obj, "attribute", p->attribute);
    PUM::Value extensions_a0(rapidjson::kArrayType);
    for ( size_t extensions_i0 = 0; extensions_i0 < p->extensions.size(); extensions_i0++ ) {
        auto& extensions_e0 = p->extensions[extensions_i0];
        PUM::PushBack(extensions_a0, extensions_e0);
    }
    PUM::Push(obj, "extensions", extensions_a0);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TFilter* p, const Jobj& obj)
{
    POM::PopStr(obj, "attribute", p->attribute);
    if ( POM::IsArray(obj, "extensions") ) {
        auto extensions_a0 = POM::FindArray(obj, "extensions");
        for ( auto& extensions_e0 : extensions_a0 ) {
            p->extensions.push_back(extensions_e0.GetString());
        }
    } else {
        std::string extensions_t0;
        POM::PopStr(obj, "extensions", extensions_t0);
        p->extensions.push_back(extensions_t0);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TImplementation* p, Jobj& obj)
{
    if ( p->jsonSerializer.get() == nullptr ) {
        PUM::PushNull(obj, "jsonSerializer");
    } else {
        auto jsonSerializer_o = PUM::AddObject(obj, "jsonSerializer");
        _Serialize(p->jsonSerializer.get(), jsonSerializer_o);
    }
    if ( p->binaryMarshaller.get() == nullptr ) {
        PUM::PushNull(obj, "binaryMarshaller");
    } else {
        auto binaryMarshaller_o = PUM::AddObject(obj, "binaryMarshaller");
        _Serialize(p->binaryMarshaller.get(), binaryMarshaller_o);
    }
    if ( p->sql.get() == nullptr ) {
        PUM::PushNull(obj, "sql");
    } else {
        auto sql_o = PUM::AddObject(obj, "sql");
        _Serialize(p->sql.get(), sql_o);
    }
    if ( p->reflection.get() == nullptr ) {
        PUM::PushNull(obj, "reflection");
    } else {
        auto reflection_o = PUM::AddObject(obj, "reflection");
        _Serialize(p->reflection.get(), reflection_o);
    }
    if ( p->entMngExt.get() == nullptr ) {
        PUM::PushNull(obj, "entMngExt");
    } else {
        auto entMngExt_o = PUM::AddObject(obj, "entMngExt");
        _Serialize(p->entMngExt.get(), entMngExt_o);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TImplementation* p, const Jobj& obj)
{
    if ( POM::IsExist(obj, "jsonSerializer") && !POM::IsNull(obj, "jsonSerializer") ) {
        if ( p->jsonSerializer.get() == nullptr ) {
            p->jsonSerializer.reset(new nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig());
        }
        auto jsonSerializer_o0 = POM::FindObject(obj, "jsonSerializer");
        _Deserialize(p->jsonSerializer.get(), jsonSerializer_o0);
    }
    if ( POM::IsExist(obj, "binaryMarshaller") && !POM::IsNull(obj, "binaryMarshaller") ) {
        if ( p->binaryMarshaller.get() == nullptr ) {
            p->binaryMarshaller.reset(new nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig());
        }
        auto binaryMarshaller_o0 = POM::FindObject(obj, "binaryMarshaller");
        _Deserialize(p->binaryMarshaller.get(), binaryMarshaller_o0);
    }
    if ( POM::IsExist(obj, "sql") && !POM::IsNull(obj, "sql") ) {
        if ( p->sql.get() == nullptr ) {
            p->sql.reset(new nsReflectionCodeGenerator::TSqlGeneratorConfig());
        }
        auto sql_o0 = POM::FindObject(obj, "sql");
        _Deserialize(p->sql.get(), sql_o0);
    }
    if ( POM::IsExist(obj, "reflection") && !POM::IsNull(obj, "reflection") ) {
        if ( p->reflection.get() == nullptr ) {
            p->reflection.reset(new nsReflectionCodeGenerator::TReflectionGeneratorConfig());
        }
        auto reflection_o0 = POM::FindObject(obj, "reflection");
        _Deserialize(p->reflection.get(), reflection_o0);
    }
    if ( POM::IsExist(obj, "entMngExt") && !POM::IsNull(obj, "entMngExt") ) {
        if ( p->entMngExt.get() == nullptr ) {
            p->entMngExt.reset(new nsReflectionCodeGenerator::TEntityManagerGeneratorConfig());
        }
        auto entMngExt_o0 = POM::FindObject(obj, "entMngExt");
        _Deserialize(p->entMngExt.get(), entMngExt_o0);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, Jobj& obj)
{
    _Serialize((nsReflectionCodeGenerator::TSerializer*)p, obj);// Inheritances
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, const Jobj& obj)
{
    _Deserialize((nsReflectionCodeGenerator::TSerializer*)p, obj);// Inheritances
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TReflectionGeneratorConfig* p, Jobj& obj)
{
    _Serialize((nsReflectionCodeGenerator::TClassDesc*)p, obj);// Inheritances
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TReflectionGeneratorConfig* p, const Jobj& obj)
{
    _Deserialize((nsReflectionCodeGenerator::TClassDesc*)p, obj);// Inheritances
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TSerializer* p, Jobj& obj)
{
    _Serialize((nsReflectionCodeGenerator::TClassDesc*)p, obj);// Inheritances
    if ( p->externalSources.get() == nullptr ) {
        PUM::PushNull(obj, "externalSources");
    } else {
        auto externalSources_o = PUM::AddObject(obj, "externalSources");
        _Serialize(p->externalSources.get(), externalSources_o);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TSerializer* p, const Jobj& obj)
{
    _Deserialize((nsReflectionCodeGenerator::TClassDesc*)p, obj);// Inheritances
    if ( POM::IsExist(obj, "externalSources") && !POM::IsNull(obj, "externalSources") ) {
        if ( p->externalSources.get() == nullptr ) {
            p->externalSources.reset(new nsReflectionCodeGenerator::TExternalSources());
        }
        auto externalSources_o0 = POM::FindObject(obj, "externalSources");
        _Deserialize(p->externalSources.get(), externalSources_o0);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TSqlGeneratorConfig* p, Jobj& obj)
{
    _Serialize((nsReflectionCodeGenerator::TSerializer*)p, obj);// Inheritances
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TSqlGeneratorConfig* p, const Jobj& obj)
{
    _Deserialize((nsReflectionCodeGenerator::TSerializer*)p, obj);// Inheritances
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TTargetForCodeGeneration* p, Jobj& obj)
{
    PUM::Push(obj, "directory", p->directory);
    PUM::Push(obj, "includeListFileName", p->includeListFileName);
    PUM::Push(obj, "header", p->header);
    auto implementation_o = PUM::AddObject(obj, "implementation");
    _Serialize(&(p->implementation), implementation_o);
    auto typeCustomizerMap_c0 = PUM::AddObject(obj, "typeCustomizerMap");
    for ( auto& typeCustomizerMap_e0 : p->typeCustomizerMap ) {
        PUM::Push(typeCustomizerMap_c0, PUM::ConvertToString(typeCustomizerMap_e0.first).data(), typeCustomizerMap_e0.second);
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TTargetForCodeGeneration* p, const Jobj& obj)
{
    POM::PopStr(obj, "directory", p->directory);
    POM::PopStr(obj, "includeListFileName", p->includeListFileName);
    POM::PopStr(obj, "header", p->header);
    auto implementation_o0 = POM::FindObject(obj, "implementation");
    _Deserialize(&(p->implementation), implementation_o0);
    auto typeCustomizerMap_a0 = POM::FindObject(obj, "typeCustomizerMap");
    for ( auto& typeCustomizerMap_e0 : typeCustomizerMap_a0 ) {
        p->typeCustomizerMap.insert({ typeCustomizerMap_e0.name.GetString(), typeCustomizerMap_e0.value.GetString() });
    }
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TTargetForParsing* p, Jobj& obj)
{
    PUM::Value directories_a0(rapidjson::kArrayType);
    for ( size_t directories_i0 = 0; directories_i0 < p->directories.size(); directories_i0++ ) {
        auto& directories_e0 = p->directories[directories_i0];
        PUM::PushBack(directories_a0, directories_e0);
    }
    PUM::Push(obj, "directories", directories_a0);
    PUM::Push(obj, "recursive", p->recursive);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TTargetForParsing* p, const Jobj& obj)
{
    if ( POM::IsArray(obj, "directories") ) {
        auto directories_a0 = POM::FindArray(obj, "directories");
        for ( auto& directories_e0 : directories_a0 ) {
            p->directories.push_back(directories_e0.GetString());
        }
    } else {
        std::string directories_t0;
        POM::PopStr(obj, "directories", directories_t0);
        p->directories.push_back(directories_t0);
    }
    POM::PopBool(obj, "recursive", p->recursive);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Serialize(nsReflectionCodeGenerator::TUnpackHandler* p, Jobj& obj)
{
    _Serialize((nsReflectionCodeGenerator::TClassDesc*)p, obj);// Inheritances
    PUM::Push(obj, "method", p->method);
}
//---------------------------------------------------------------------------------------
void TJsonSerializer::_Deserialize(nsReflectionCodeGenerator::TUnpackHandler* p, const Jobj& obj)
{
    _Deserialize((nsReflectionCodeGenerator::TClassDesc*)p, obj);// Inheritances
    POM::PopStr(obj, "method", p->method);
}
//---------------------------------------------------------------------------------------
