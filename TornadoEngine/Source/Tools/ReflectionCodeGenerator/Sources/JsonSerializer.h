/*
	ReflectionCodeGenerator
*/
// File has been generated by ReflectionCodeGenerator version 1.14 build 42, at 2020_09_13 14:04:07.747
	
#pragma once

#include <string>
#include <functional>
#include "JsonMaster.h"
#include "IncludeList.h"

namespace nsJson
{
    class TJsonSerializer
    {
        typedef TJsonMaster::Jobj Jobj;
        typedef TJsonMaster::Jarr Jarr;
        typedef TJsonMaster::Value Value;
    
        struct TypeFunc
        {
            std::function<void(void*, std::string&)>  serializeFunc;
            std::function<void(void*&, const std::string&)> deserializeFunc;
            std::function<void(void*, const std::string&)> fillFunc;
        };
    
        static std::map<std::string, TypeFunc> mTypeNameFuncsMap;
        static std::list<std::string> mTypeNameList;
    
        static void Init();
    public:
        static const std::list<std::string>& GetTypeNameList();
    
        template <typename Type>
        static void Serialize( Type* p, std::string& str );
        template <typename Type>
        static void Deserialize( Type*& p, const std::string& str );
        template <typename Type>
        static void Fill( Type* p, const std::string& str );
    
        static void Serialize(void* p, std::string& str, const std::string& typeName);
        static void Deserialize(void*& p, const std::string& str, const std::string& typeName);
        static void Fill(void* p, const std::string& str, const std::string& typeName);
    private:
        template <typename Type>
        static void _Deserialize( Type*& p, const std::string& str, bool checkPtr );
    private:
        //static void _Serialize( TFloat3* p, Jobj& obj );
        //static void _Deserialize( TFloat3* p, const json11::Json& json );
        //
        //static void _Serialize( TFloat4* p, Jobj& obj );
        //static void _Deserialize( TFloat4* p, const json11::Json& json );
        //
        //static void _Serialize( TParamClass* p, Jobj& obj );
        //static void _Deserialize( TParamClass* p, const json11::Json& json );
        //
        //static void _Serialize( TTestClass* p, Jobj& obj );
        //static void _Deserialize( TTestClass* p, const json11::Json& json );
        //
        //static void _Serialize( nsBS::TBaseStruct* p, Jobj& obj );
        //static void _Deserialize( nsBS::TBaseStruct* p, const json11::Json& json );
        //
        //static void _Serialize( nsBS::TTestStruct* p, Jobj& obj );
        //static void _Deserialize( nsBS::TTestStruct* p, const Jobj& obj );
        //
        //static void _Serialize( nsMathTools::TMatrix16* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TMatrix16* p, const json11::Json& json );
        //
        //static void _Serialize( nsMathTools::TMatrix9* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TMatrix9* p, const json11::Json& json );
        //
        //static void _Serialize( nsMathTools::TOrientation* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TOrientation* p, const json11::Json& json );
        //
        //static void _Serialize( nsMathTools::TPlane* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TPlane* p, const json11::Json& json );
        //
        //static void _Serialize( nsMathTools::TPoint2* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TPoint2* p, const json11::Json& json );
        //
        //static void _Serialize( nsMathTools::TQuaternion* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TQuaternion* p, const json11::Json& json );
        //
        //static void _Serialize( nsMathTools::TVector2* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TVector2* p, const json11::Json& json );
        //
        //static void _Serialize( nsMathTools::TVector3* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TVector3* p, const json11::Json& json );
        //
        //static void _Serialize( nsMathTools::TVector4* p, Jobj& obj );
        //static void _Deserialize( nsMathTools::TVector4* p, const json11::Json& json );
        
        static void _Serialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TBinaryMarshallerGeneratorConfig* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TClassDesc* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TClassDesc* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TConfig* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TConfig* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TFilter* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TFilter* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TImplementation* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TImplementation* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TJsonSerializerGeneratorConfig* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TSqlGeneratorConfig* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TSqlGeneratorConfig* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TTargetForCodeGeneration* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TTargetForParsing* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TTargetForParsing* p, const Jobj& obj);
        
        static void _Serialize( nsReflectionCodeGenerator::TUnpackHandler* p, Jobj& obj );
        static void _Deserialize( nsReflectionCodeGenerator::TUnpackHandler* p, const Jobj& obj);        
    };
    //------------------------------------------------------------------------------------------------------------
    template <typename Type>
    static void TJsonSerializer::Serialize( Type* p, std::string& str )
    {
        rapidjson::Document doc(rapidjson::Type::kObjectType);
        rapidjson::Document::Object obj = doc.GetObject();

        _Serialize( p, obj );

        rapidjson::StringBuffer sb;
        rapidjson::PrettyWriter<rapidjson::StringBuffer> writer(sb);
        doc.Accept(writer);
        str = sb.GetString();
    }
    //------------------------------------------------------------------------------------------------------------
    template <typename Type>
    static void TJsonSerializer::Deserialize( Type*& p, const std::string& str )
    {
        _Deserialize( p, str, true );
    }
    //------------------------------------------------------------------------------------------------------------
    template <typename Type>
    static void TJsonSerializer::Fill( Type* p, const std::string& str )
    {
        _Deserialize( p, str, false );
    }
    //------------------------------------------------------------------------------------------------------------
    template <typename Type>
    static void TJsonSerializer::_Deserialize( Type*& p, const std::string& str, bool checkPtr )
    {
        rapidjson::Document doc;
        const unsigned parseFlags = rapidjson::kParseFullPrecisionFlag | rapidjson::kParseCommentsFlag;
        doc.Parse<parseFlags>(str.data());
        if ( doc.HasParseError() ) {
            return;
        }
        if ( checkPtr ) {
            p = p ? p : new Type();
        }

        _Deserialize(p, doc.GetObject());


        //std::string err;
        //auto json = json11::Json::parse( str, err, json11::JsonParse::COMMENTS );
        //if ( err.size() > 0 ) {
        //    return;
        //}
    
        //if ( checkPtr ) {
        //    p = p ? p : new Type();
        //}
    
        //_Deserialize( p, json.object_items() );
    }
}
